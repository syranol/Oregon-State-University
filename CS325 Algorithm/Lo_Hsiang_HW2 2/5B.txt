////  main.cpp//  StoogeSortFn////  Created by Sean Lo on 7/8/18.//  Copyright © 2018 Sean Lo. All rights reserved.////Source COde Referenced from wikipedia and is also provided by the teacher//from the homework assignment. Also from// rosettacode.org/wiki/Sorting_algorithms/Stooge_sort#C.2B.2B as well#include <iostream>#include <fstream>using namespace std;/********************************************************************************************************** * Description: THe purpose of this class is to sort the given data in a "stooge" algorithm. This algorithm * is referenced from an online source that is written above *********************************************************************************************************/void sort( int* arr, int start, int end ){        if( arr[start] > arr[end - 1] )        {            swap( arr[start], arr[end - 1] );        }        int n = end - start;        if( n > 2 )        {            n /= 3; sort( arr, start, end - n );            sort( arr, start + n, end );            sort( arr, start, end - n );        }    }/********************************************************************************************************** * Description: This is the main menu that receive input, process it through the file and output the result *********************************************************************************************************/  int main( int argc, char* argv[] ){    int count; //Number of input    count = 100;    int arr1[count];    for(int i = 0; i < count; i++)    {        arr1[i] = rand() % 1000;    }        clock_t t;    t = clock();        sort(arr1, 0, count);    t = clock() - t;    cout << "Sort - Count = 100: " <<  t << endl;    //-----        count = 500;    int arr2[count];    for(int i = 0; i < count; i++){        arr2[i] = rand() % 1000;    }    t = clock();    sort(arr2, 0, count);    t = clock() - t;    cout << "Sort - Count = 500: " <<  t << endl;        count = 1000;    int arr3[count];    for(int i = 0; i < count; i++){        arr3[i] = rand() % 1000;    }    t = clock();    sort(arr3, 0, count);    t = clock() - t;    cout << "Sort - Count = 1000: " <<  t << endl;        count = 1500;    int arr4[count];    for(int i = 0; i < count; i++){        arr4[i] = rand() % 1000;    }    t = clock();    sort(arr4, 0, count);    t = clock() - t;    cout << "Sort - Count = 1500: " <<  t << endl;        count = 2000;    int arr5[count];    for(int i = 0; i < count; i++){        arr5[i] = rand() % 1000;    }    t = clock();     sort(arr5, 0, count);    t = clock() - t;    cout << "Sort - Count = 2000: " <<  t << endl;        count = 3000;    int arr6[count];    for(int i = 0; i < count; i++){        arr6[i] = rand() % 1000;    }    t = clock();     sort(arr6, 0, count);    t = clock() - t;    cout << "Sort - Count = 3000: " <<  t << endl;            count = 5000;    int arr7[count];    for(int i = 0; i < count; i++){        arr7[i] = rand() % 1000;    }    t = clock();    sort(arr7, 0, count);    t = clock() - t;    cout << "Sort - Count - 5000: " <<  t << endl;    return 0;}